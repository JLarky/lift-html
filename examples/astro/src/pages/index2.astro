---
// import { createSignal, createEffect, onCleanup } from "solid-js";
// import { liftHtml } from "../../../../packages/lift-solid/mod.ts";

// const X = liftHtml("solid-counter", {
//   observedAttributes: ["x"] as const,
//   init() {
//     const [signal, setSignal] = createSignal();
//     console.log("init", signal, this);
//     createEffect(() => {
//       console.log("effect", signal());
//     });
//   },
// });

// new X();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <body>
    <style>
      body {
        background-color: #f9f9f9;
      }
      article {
        margin-bottom: 1rem;
        padding: 1rem;
        background-color: white;
      }
    </style>
    <h1>Astro</h1>
    <article>
      <tiny-test>Hello</tiny-test>
      <script>
        import { tinyLift } from "../../../../packages/tiny-lift/mod.ts";
        tinyLift("tiny-test", {
          connectedCallback() {
            this.appendChild(document.createTextNode(" from tiny-lift"));
          },
        });
      </script>
    </article>
    <article>
      <lift-test>Hello</lift-test>
      <script>
        import { liftHtml } from "../../../../packages/html-lift/mod.ts";
        liftHtml("lift-test", {
          connectedCallback() {
            this.appendChild(document.createTextNode(" from lift-html"));
          },
        });
      </script>
    </article>
    <article>
      <lift-counter data-id="1">Counter <button>0</button></lift-counter>
      <lift-counter data-id="2">Counter <button>0</button></lift-counter>
      <script>
        import { liftHtml } from "../../../../packages/lift-options-this/mod.ts";

        liftHtml("lift-counter", {
          id: "",
          onCleanup: () => {},
          connectedCallback(element) {
            this.id = element.dataset.id!;
            const button = element.querySelector("button")!;
            const abortController = new AbortController();
            this.onCleanup = () => {
              abortController.abort();
            };
            button.addEventListener(
              "click",
              () => {
                button.textContent = String(Number(button.textContent) + 1);
              },
              { signal: abortController.signal }
            );
          },
          disconnectedCallback(el) {
            console.log("disconnected", el.dataset.id, this.id);
            this.onCleanup();
          },
        });
      </script>
      <button onclick="this.parentElement.remove()">unmount</button>
    </article>
    <article>
      <lift-html-counter data-id="1"
        >Counter <button>0</button></lift-html-counter
      >
      <lift-html-counter data-id="2"
        >Counter <button>0</button></lift-html-counter
      >
      <script>
        import { liftHtml } from "../../../../packages/lift-html/mod.ts";

        const LiftHtmlCounter = liftHtml(
          "lift-html-counter",
          {
            observedAttributes: ["x"] as const,
            attributeChangedCallback(attrName, oldValue, newValue) {
              console.log(attrName, oldValue, newValue);
            },
            connectedCallback() {
              const button = this.querySelector("button")!;
              button.addEventListener(
                "click",
                () => {
                  button.textContent = String(Number(button.textContent) + 1);
                },
                { signal: this.state.abortController.signal }
              );
            },
            disconnectedCallback() {
              this.state.abortController.abort();
            },
          },
          () => ({
            abortController: new AbortController(),
          })
        );
        declare global {
          interface HTMLElementTagNameMap {
            "lift-html-counter": typeof LiftHtmlCounter;
          }
        }

        const x = document.createElement("lift-html-counter");
        x.state.abortController;
        // x.formAssociated;
        // x.observedAttributes[0] === "x";
        // x.observedAttributes[0] === "x2";
      </script>
      <button onclick="this.parentElement.remove()">unmount</button>
    </article>
    <article>
      <vanilla-counter data-id="1">Counter <button>0</button></vanilla-counter>
      <vanilla-counter data-id="2">Counter <button>0</button></vanilla-counter>
      <script>
        customElements.define(
          "vanilla-counter",
          class extends HTMLElement {
            abortController = new AbortController();
            connectedCallback() {
              const button = this.querySelector("button")!;
              button.addEventListener(
                "click",
                () => {
                  button.textContent = String(Number(button.textContent) + 1);
                },
                { signal: this.abortController.signal }
              );
            }
            disconnectedCallback() {
              this.abortController.abort();
            }
          }
        );
      </script>
      <button onclick="this.parentElement.remove()">unmount</button>
    </article>
    <article>
      Solid
      <solid-counter data-id="1">Counter <button>0</button></solid-counter>
      <solid-counter data-id="2">Counter <button>0</button></solid-counter>
      <script>
        import { createSignal, createEffect, onCleanup } from "solid-js";
        import {
          liftHtml,
          useAttributes,
        } from "../../../../packages/lift-solid/mod.ts";

        // const observedAttributes = ["x", "data-id"] as const;
        liftHtml("solid-counter", {
          observedAttributes: ["x", "data-id"] as const,
          init() {
            this.options;
            this.options.observedAttributes[1] === "data-id";
            const x = useAttributes(this);
            const abortController = new AbortController();
            createEffect(() => {
              console.log("effect", x);
            });
            createEffect(() => {
              console.log("effect x", x.test, x["data-id"]);
            });
            console.log("connete", x);
            onCleanup(() => {
              console.log("cleanup");
              abortController.abort();
            });
            const button = this.querySelector("button")!;
            button.addEventListener(
              "click",
              () => {
                button.textContent = String(Number(button.textContent) + 1);
              },
              { signal: abortController.signal }
            );
          },
        });

        const x = document.createElement("solid-counter");
        const button = document.createElement("button");
        x.appendChild(button);
        document.body.appendChild(x);
        document.body.appendChild(x);
        document.body.appendChild(x);
        document.body.appendChild(x);
        document.body.appendChild(x);
        x.setAttribute("x", "x");
        x.setAttribute("x", "y");
        setTimeout(() => {
          x.setAttribute("x", "z");
        }, 1000);
      </script>
      <button onclick="this.parentElement.remove()">unmount</button>
    </article>
  </body>
</html>
